(undo-tree-save-format-version . 1)
"e53801dc8d5c0ef64401bf7f98ac9ff650e83a98"
[nil nil nil nil (26383 64233 231152 0) 0 nil]
([nil nil ((apply 17 5459 5670 undo--wrap-and-run-primitive-undo 5459 5670 ((#("; " 0 2 (face font-lock-comment-delimiter-face fontified t)) . -5645) (#("; " 0 2 (face font-lock-comment-delimiter-face fontified t)) . -5636) (#("; " 0 2 (face font-lock-comment-delimiter-face fontified t)) . -5608) (#("; " 0 2 (face font-lock-comment-delimiter-face fontified t)) . -5569) (#("; " 0 2 (face font-lock-comment-delimiter-face fontified t)) . -5560) (#("; " 0 2 (face font-lock-comment-delimiter-face fontified t)) . -5517) (#("; " 0 2 (face font-lock-comment-delimiter-face fontified t)) . -5502) (#("; " 0 2 (face font-lock-comment-delimiter-face fontified t)) . -5488) (#(";" 0 1 (face font-lock-comment-delimiter-face fontified t)) . -5459)))) nil (26383 64241 465432 0) 0 nil] [nil nil ((#("(use-package corfu
  :custom
  (corfu-auto t)                 ;; Enable auto completion
  (corfu-quit-no-match t)      
  :init
  (global-corfu-mode))

;; Part of corfu
;(use-package corfu-popupinfo
;  :after corfu
;  :straight nil
;  :hook (corfu-mode . corfu-popupinfo-mode)
;  :custom
;  (corfu-popupinfo-delay '(0.25 . 0.1))
;  (corfu-popupinfo-hide nil)
;  :config
;  (corfu-popupinfo-mode))

;; Fancy completion-at-point functions; there's too much in the cape package to
; configure here; dive in when you're comfortable!
;(use-package cape
;  :straight t
;  :init
;  (add-to-list 'completion-at-point-functions #'cape-dabbrev)
;  (add-to-list 'completion-at-point-functions #'cape-file))

;; Pretty icons for corfu
(use-package kind-icon
  :if (display-graphic-p)
  :straight t
  :after corfu
  :config
  (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter))

" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t) 1 12 (face font-lock-keyword-face fontified t) 12 13 (fontified t) 13 16 (face font-lock-constant-face fontified t) 16 18 (face font-lock-constant-face fontified t) 18 21 (fontified t) 21 28 (face font-lock-builtin-face fontified t) 28 31 (fontified t) 31 32 (face (rainbow-delimiters-depth-2-face) fontified t) 32 44 (fontified t) 44 45 (face (rainbow-delimiters-depth-2-face) fontified t) 45 62 (fontified t) 62 65 (face font-lock-comment-delimiter-face fontified t) 65 88 (face font-lock-comment-face fontified t) 88 90 (fontified t) 90 91 (face (rainbow-delimiters-depth-2-face) fontified t) 91 112 (fontified t) 112 113 (face (rainbow-delimiters-depth-2-face) fontified t) 113 122 (fontified t) 122 127 (face font-lock-builtin-face fontified t) 127 130 (fontified t) 130 131 (face (rainbow-delimiters-depth-2-face) fontified t) 131 148 (fontified t) 148 149 (face (rainbow-delimiters-depth-2-face) fontified t) 149 150 (face (rainbow-delimiters-depth-1-face) fontified t) 150 152 (fontified t) 152 155 (face font-lock-comment-delimiter-face fontified t) 155 169 (face font-lock-comment-face fontified t) 169 170 (face font-lock-comment-delimiter-face fontified t) 170 199 (face font-lock-comment-face fontified t) 199 202 (face font-lock-comment-delimiter-face fontified t) 202 215 (face font-lock-comment-face fontified t) 215 218 (face font-lock-comment-delimiter-face fontified t) 218 232 (face font-lock-comment-face fontified t) 232 235 (face font-lock-comment-delimiter-face fontified t) 235 277 (face font-lock-comment-face fontified t) 277 280 (face font-lock-comment-delimiter-face fontified t) 280 288 (face font-lock-comment-face fontified t) 288 291 (face font-lock-comment-delimiter-face fontified t) 291 329 (face font-lock-comment-face fontified t) 329 332 (face font-lock-comment-delimiter-face fontified t) 332 359 (face font-lock-comment-face fontified t) 359 362 (face font-lock-comment-delimiter-face fontified t) 362 370 (face font-lock-comment-face fontified t) 370 373 (face font-lock-comment-delimiter-face fontified t) 373 397 (face font-lock-comment-face fontified t) 397 398 (fontified t) 398 401 (face font-lock-comment-delimiter-face fontified t) 401 478 (face font-lock-comment-face fontified t) 478 480 (face font-lock-comment-delimiter-face fontified t) 480 529 (face font-lock-comment-face fontified t) 529 530 (face font-lock-comment-delimiter-face fontified t) 530 548 (face font-lock-comment-face fontified t) 548 551 (face font-lock-comment-delimiter-face fontified t) 551 563 (face font-lock-comment-face fontified t) 563 566 (face font-lock-comment-delimiter-face fontified t) 566 572 (face font-lock-comment-face fontified t) 572 575 (face font-lock-comment-delimiter-face fontified t) 575 635 (face font-lock-comment-face fontified t) 635 638 (face font-lock-comment-delimiter-face fontified t) 638 696 (face font-lock-comment-face fontified t) 696 697 (fontified t) 697 700 (face font-lock-comment-delimiter-face fontified t) 700 723 (face font-lock-comment-face fontified t) 723 724 (face (rainbow-delimiters-depth-1-face) fontified t) 724 735 (face font-lock-keyword-face fontified t) 735 736 (fontified t) 736 745 (face font-lock-constant-face fontified t) 745 748 (fontified t) 748 751 (face font-lock-builtin-face fontified t) 751 752 (fontified t) 752 753 (face (rainbow-delimiters-depth-2-face) fontified t) 753 770 (fontified t) 770 771 (face (rainbow-delimiters-depth-2-face) fontified t) 771 774 (fontified t) 774 783 (face font-lock-builtin-face fontified t) 783 788 (fontified t) 788 794 (face font-lock-builtin-face fontified t) 794 803 (fontified t) 803 810 (face font-lock-builtin-face fontified t) 810 813 (fontified t) 813 814 (face (rainbow-delimiters-depth-2-face) fontified t) 814 879 (fontified t) 879 880 (face (rainbow-delimiters-depth-2-face) fontified t) 880 881 (face (rainbow-delimiters-depth-1-face) fontified t) 881 883 (fontified t)) . 5290) (undo-tree-id39 . -882) (undo-tree-id40 . -882) (undo-tree-id41 . -13) (undo-tree-id42 . -882) (undo-tree-id43 . -882) 6172 (t 26383 60929 975379 178000)) ((5290 . 6173)) (26383 64232 910936 0) 0 nil])
([nil nil ((5401 . 5401) (5401 . 5411) (#("t" 0 1 (fontified t)) . -5401) (undo-tree-id351 . -1) (undo-tree-id352 . -1) (undo-tree-id353 . -1) 5402 (#(" " 0 1 (fontified t)) . -5403) (undo-tree-id354 . -1) (undo-tree-id355 . -1) (undo-tree-id356 . -1) (undo-tree-id357 . -1) (undo-tree-id358 . -1) (undo-tree-id359 . -1) (undo-tree-id360 . -1) (undo-tree-id361 . -1) (undo-tree-id362 . -1) (undo-tree-id363 . -1) (undo-tree-id364 . -1) (undo-tree-id365 . -1) (undo-tree-id366 . -1) (undo-tree-id367 . -1) (undo-tree-id368 . -1) (undo-tree-id369 . -1) (undo-tree-id370 . -1) (undo-tree-id371 . -1) (undo-tree-id372 . -1) (undo-tree-id373 . -1) (#(" " 0 1 (fontified t)) . -5404) (undo-tree-id374 . -1) (undo-tree-id375 . -1) (undo-tree-id376 . -1) (undo-tree-id377 . -1) (undo-tree-id378 . -1) (undo-tree-id379 . -1) (undo-tree-id380 . -1) (undo-tree-id381 . -1) (undo-tree-id382 . -1) (undo-tree-id383 . -1) (undo-tree-id384 . -1) (undo-tree-id385 . -1) (undo-tree-id386 . -1) (undo-tree-id387 . -1) (undo-tree-id388 . -1) (undo-tree-id389 . -1) (undo-tree-id390 . -1) (undo-tree-id391 . -1) (undo-tree-id392 . -1) (#(" " 0 1 (fontified t)) . -5405) (undo-tree-id393 . -1) (undo-tree-id394 . -1) (undo-tree-id395 . -1) (undo-tree-id396 . -1) (undo-tree-id397 . -1) (undo-tree-id398 . -1) (undo-tree-id399 . -1) (undo-tree-id400 . -1) (undo-tree-id401 . -1) (undo-tree-id402 . -1) (undo-tree-id403 . -1) (undo-tree-id404 . -1) (undo-tree-id405 . -1) (undo-tree-id406 . -1) (undo-tree-id407 . -1) (undo-tree-id408 . -1) (#(" " 0 1 (fontified t)) . -5406) (undo-tree-id409 . 1) (undo-tree-id410 . -1) (undo-tree-id411 . -1) (undo-tree-id412 . -1) (undo-tree-id413 . -1) (undo-tree-id414 . -1) (undo-tree-id415 . -1) (undo-tree-id416 . -1) (undo-tree-id417 . -1) (undo-tree-id418 . -1) (undo-tree-id419 . -1) (undo-tree-id420 . -1) (undo-tree-id421 . -1) (undo-tree-id422 . -1) (undo-tree-id423 . -1) (#(" " 0 1 (fontified t)) . -5407) (undo-tree-id424 . -1) (undo-tree-id425 . -1) (undo-tree-id426 . -1) (undo-tree-id427 . -1) (undo-tree-id428 . -1) (undo-tree-id429 . -1) (undo-tree-id430 . -1) (undo-tree-id431 . -1) (undo-tree-id432 . -1) (undo-tree-id433 . -1) (undo-tree-id434 . -1) (undo-tree-id435 . -1) (#(" " 0 1 (fontified t)) . -5408) (undo-tree-id436 . -1) (undo-tree-id437 . -1) (undo-tree-id438 . -1) (undo-tree-id439 . -1) (undo-tree-id440 . -1) (undo-tree-id441 . -1) (undo-tree-id442 . -1) (undo-tree-id443 . -1) 5409 (t 26383 64241 469329 401000)) nil (26383 64254 667324 0) 0 nil])
([nil nil ((#(";; Popup completion-at-point
" 0 3 (face font-lock-comment-delimiter-face fontified t) 3 29 (face font-lock-comment-face fontified t)) . 5261) (undo-tree-id33 . -29) (undo-tree-id34 . -29) (undo-tree-id35 . -29) (undo-tree-id36 . -29) (undo-tree-id37 . -28) (undo-tree-id38 . -29) (t 26383 64182 500593 13000)) ((5261 . 5290)) (26383 64232 607761 0) 0 nil])
([nil current ((#("
;; Fancy completion-at-point functions; there's too much in the cape package to
; configure here; dive in when you're comfortable!
;(use-package cape
;  :straight t
;  :init
;  (add-to-list 'completion-at-point-functions #'cape-dabbrev)
;  (add-to-list 'completion-at-point-functions #'cape-file))
" 0 1 (fontified t) 1 4 (face font-lock-comment-delimiter-face fontified t) 4 81 (face font-lock-comment-face fontified t) 81 83 (face font-lock-comment-delimiter-face fontified t) 83 132 (face font-lock-comment-face fontified t) 132 133 (face font-lock-comment-delimiter-face fontified t) 133 151 (face font-lock-comment-face fontified t) 151 154 (face font-lock-comment-delimiter-face fontified t) 154 166 (face font-lock-comment-face fontified t) 166 169 (face font-lock-comment-delimiter-face fontified t) 169 175 (face font-lock-comment-face fontified t) 175 178 (face font-lock-comment-delimiter-face fontified t) 178 238 (face font-lock-comment-face fontified t) 238 241 (face font-lock-comment-delimiter-face fontified t) 241 299 (face font-lock-comment-face fontified t)) . 5673) (undo-tree-id444 . -238) (undo-tree-id445 . -238) (undo-tree-id446 . -298) (undo-tree-id447 . -1) (undo-tree-id448 . -1) (undo-tree-id449 . -151) (undo-tree-id450 . -151) (undo-tree-id451 . -238) (undo-tree-id452 . -238) (undo-tree-id453 . -166) (undo-tree-id454 . -166) (undo-tree-id455 . -299) (t 26383 64254 675718 532000)) nil (26383 64260 294752 0) 0 nil])
([nil nil ((#("company" 0 7 (face font-lock-constant-face fontified nil)) . 5287) (undo-tree-id23 . -7) (undo-tree-id24 . -7) (5274 . 5287) 5281 (#(" " 0 1 (fontified t)) . -5281) (undo-tree-id25 . -1) 5282 (5266 . 5282) (#("-" 0 1 (fontified t)) . -5266) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (#("p" 0 1 (fontified t)) . -5267) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (#("a" 0 1 (fontified t)) . -5268) (undo-tree-id30 . -1) (#("c" 0 1 (fontified t)) . -5269) (undo-tree-id31 . -1) (#("k" 0 1 (fontified t)) . -5270) (undo-tree-id32 . -1) 5271 (5265 . 5271) (5263 . 5263) (5263 . 5265) (5262 . 5263) (5261 . 5263) (5260 . 5261) (5259 . 5260) (t 26383 64184 56753 289000) 5239) ((#("
" 0 1 (fontified t)) . 5259) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (#("
" 0 1 (fontified t)) . 5260) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (undo-tree-id221 . 1) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (undo-tree-id242 . -1) (#("()" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil) 1 2 (face (rainbow-delimiters-depth-1-face) fontified nil)) . 5261) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (undo-tree-id245 . -1) (undo-tree-id246 . -1) (undo-tree-id247 . -1) (undo-tree-id248 . -1) (undo-tree-id249 . -1) (undo-tree-id250 . -1) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (undo-tree-id255 . -1) (undo-tree-id256 . -1) (undo-tree-id257 . -1) (undo-tree-id258 . -1) (undo-tree-id259 . -1) (undo-tree-id260 . -1) (undo-tree-id261 . -1) (undo-tree-id262 . -1) (undo-tree-id263 . -1) (#("u" 0 1 (face font-lock-keyword-face fontified nil)) . 5262) (undo-tree-id264 . -1) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (undo-tree-id267 . -1) (undo-tree-id268 . -1) (undo-tree-id269 . -1) (undo-tree-id270 . -1) (undo-tree-id271 . -1) (undo-tree-id272 . -1) (undo-tree-id273 . -1) (undo-tree-id274 . -1) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (undo-tree-id277 . -1) (undo-tree-id278 . -1) (undo-tree-id279 . -1) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (undo-tree-id282 . -1) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (#("se" 0 2 (face font-lock-keyword-face fontified nil)) . 5263) (undo-tree-id285 . -2) (undo-tree-id286 . -2) (undo-tree-id287 . -2) (undo-tree-id288 . -2) (undo-tree-id289 . -2) (undo-tree-id290 . -2) (undo-tree-id291 . -2) (undo-tree-id292 . -2) (undo-tree-id293 . -2) (undo-tree-id294 . -2) (undo-tree-id295 . -2) (undo-tree-id296 . -2) (undo-tree-id297 . -2) (undo-tree-id298 . -2) (undo-tree-id299 . -2) (undo-tree-id300 . -2) (undo-tree-id301 . -2) (undo-tree-id302 . -2) (undo-tree-id303 . -2) (undo-tree-id304 . -2) (undo-tree-id305 . -2) (#("--pack" 0 1 (face font-lock-keyword-face fontified nil) 1 2 (fontified nil) 2 3 (fontified nil) 3 4 (fontified nil) 4 5 (fontified nil) 5 6 (fontified nil)) . 5265) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (undo-tree-id309 . -1) (undo-tree-id310 . -1) (undo-tree-id311 . -1) (undo-tree-id312 . -1) (undo-tree-id313 . -1) (undo-tree-id314 . -1) (undo-tree-id315 . -6) (undo-tree-id316 . -1) (undo-tree-id317 . -1) (undo-tree-id318 . -1) (undo-tree-id319 . -1) (undo-tree-id320 . -1) (undo-tree-id321 . -1) (undo-tree-id322 . -1) (undo-tree-id323 . -1) (undo-tree-id324 . -1) (undo-tree-id325 . -1) (undo-tree-id326 . -1) (5266 . 5271) (#("package company " 0 7 (face font-lock-keyword-face fontified nil) 7 8 (fontified nil) 8 15 (face font-lock-constant-face fontified nil) 15 16 (fontified nil)) . 5266) (undo-tree-id327 . -8) (undo-tree-id328 . -8) (undo-tree-id329 . -8) (undo-tree-id330 . -8) (undo-tree-id331 . -8) (undo-tree-id332 . -8) (undo-tree-id333 . -8) (undo-tree-id334 . -8) (undo-tree-id335 . -8) (undo-tree-id336 . -8) (undo-tree-id337 . -8) (undo-tree-id338 . -8) (undo-tree-id339 . -8) (undo-tree-id340 . -8) (undo-tree-id341 . -8) (undo-tree-id342 . -8) (undo-tree-id343 . -8) (undo-tree-id344 . -8) (undo-tree-id345 . -8) (undo-tree-id346 . -8) (undo-tree-id347 . -8) (5281 . 5282) (#(":company-kind" 0 13 (face font-lock-constant-face fontified nil)) . 5274) (undo-tree-id348 . -13) (undo-tree-id349 . -12) (undo-tree-id350 . -12) (5287 . 5294)) (26383 64232 462479 0) 0 nil])
nil
([nil nil ((5281 . 5282) (#(")" 0 1 (face font-lock-constant-face fontified nil)) . -5281) (5281 . 5282) (5274 . 5274) (5274 . 5281) (#(":company-kind)" 0 13 (face font-lock-constant-face fontified t) 13 14 (face (rainbow-delimiters-depth-1-face) fontified t)) . 5274) (undo-tree-id18 . -12) (undo-tree-id19 . -13) (undo-tree-id20 . -13) (undo-tree-id21 . 1) (undo-tree-id22 . -12)) ((5274 . 5288) (#("company" 0 7 (face font-lock-constant-face fontified nil)) . 5274) (undo-tree-id154 . -7) (undo-tree-id155 . -6) (undo-tree-id156 . -7) (undo-tree-id157 . -7) (undo-tree-id158 . -6) (undo-tree-id159 . -6) (undo-tree-id160 . -6) (undo-tree-id161 . -7) (undo-tree-id162 . -7) (undo-tree-id163 . -7) (undo-tree-id164 . -7) (undo-tree-id165 . -7) (undo-tree-id166 . -7) (undo-tree-id167 . -7) (undo-tree-id168 . -7) (undo-tree-id169 . -7) (#(")" 0 1 (face font-lock-constant-face fontified nil)) . 5281) (5281 . 5282) (#(")" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . 5281) (undo-tree-id170 . -1)) (26383 64232 172315 0) 0 nil])
([nil nil ((5309 . 5309) (5309 . 5314) (5302 . 5302) (5302 . 5309) (5295 . 5295) (5295 . 5302) (5294 . 5296) (5291 . 5294) (5284 . 5284) (5284 . 5291) (5281 . 5284)) ((#("
  " 0 1 (fontified t) 1 3 (fontified nil)) . 5281) (undo-tree-id95 . -3) (undo-tree-id96 . -3) (undo-tree-id97 . -3) (undo-tree-id98 . -3) (undo-tree-id99 . -3) (undo-tree-id100 . -3) (undo-tree-id101 . -3) (undo-tree-id102 . -3) (undo-tree-id103 . -3) (#(":config" 0 7 (face font-lock-builtin-face fontified nil)) . 5284) (undo-tree-id104 . -7) (undo-tree-id105 . -7) (undo-tree-id106 . -7) (undo-tree-id107 . -7) (undo-tree-id108 . -7) (undo-tree-id109 . -7) (undo-tree-id110 . -7) (undo-tree-id111 . -7) (undo-tree-id112 . -7) (#("
  " 0 1 (fontified t) 1 3 (fontified nil)) . 5291) (undo-tree-id113 . -3) (undo-tree-id114 . -3) (undo-tree-id115 . -3) (undo-tree-id116 . -1) (undo-tree-id117 . -3) (undo-tree-id118 . -3) (undo-tree-id119 . -3) (undo-tree-id120 . -3) (undo-tree-id121 . -3) (#("()" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil) 1 2 (face (rainbow-delimiters-depth-2-face) fontified nil)) . 5294) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (#("global-" 0 7 (fontified nil)) . 5295) (undo-tree-id130 . -7) (undo-tree-id131 . -7) (undo-tree-id132 . -7) (undo-tree-id133 . -7) (undo-tree-id134 . -7) (undo-tree-id135 . -7) (undo-tree-id136 . -7) (undo-tree-id137 . -7) (#("company" 0 7 (fontified nil)) . 5302) (undo-tree-id138 . -7) (undo-tree-id139 . -7) (undo-tree-id140 . -7) (undo-tree-id141 . -7) (undo-tree-id142 . -7) (undo-tree-id143 . -7) (undo-tree-id144 . -7) (undo-tree-id145 . -7) (#("-mode" 0 5 (fontified t)) . 5309) (undo-tree-id146 . -2) (undo-tree-id147 . -2) (undo-tree-id148 . -2) (undo-tree-id149 . -2) (undo-tree-id150 . -2) (undo-tree-id151 . -2) (undo-tree-id152 . -2) (undo-tree-id153 . -2) (t 26383 64213 15412 909000)) (26383 64231 668341 0) 0 nil])
([nil nil ((#("(use-package company
  :config
  (global-company-mode))
" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t) 1 12 (face font-lock-keyword-face fontified t) 12 13 (fontified t) 13 20 (face font-lock-constant-face fontified t) 20 21 (fontified t) 21 23 (fontified t) 23 30 (face font-lock-builtin-face fontified t) 30 31 (fontified t) 31 33 (fontified t) 33 34 (face (rainbow-delimiters-depth-2-face) fontified t) 34 53 (fontified t) 53 54 (face (rainbow-delimiters-depth-2-face) fontified t) 54 55 (face (rainbow-delimiters-depth-1-face) fontified t) 55 56 (fontified t)) . 5261) (undo-tree-id6 . -50) (undo-tree-id7 . -19) (undo-tree-id8 . -50) (undo-tree-id9 . -55) (undo-tree-id10 . 3) (undo-tree-id11 . -13) (undo-tree-id12 . -52) (undo-tree-id13 . -50) (undo-tree-id14 . -13) (undo-tree-id15 . -19) (undo-tree-id16 . -19) (undo-tree-id17 . -19) 5311 (t 26383 64213 15412 909000)) ((5261 . 5317)) (26383 64231 528167 0) 0 nil])
([nil nil ((#("[" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . -5265) (undo-tree-id0 . -1) (#("]" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . 5266) (#("/" 0 1 (fontified t)) . -5266) (undo-tree-id1 . -1) (#("p" 0 1 (fontified t)) . -5267) (undo-tree-id2 . -1) (#("a" 0 1 (fontified t)) . -5268) (undo-tree-id3 . -1) (#("c" 0 1 (fontified t)) . -5269) (undo-tree-id4 . -1) (#("k" 0 1 (fontified t)) . -5270) (undo-tree-id5 . -1) 5271 (5266 . 5266) (5266 . 5271) (5262 . 5267) (5261 . 5263) (5260 . 5261) 5260) ((#("
" 0 1 (fontified t)) . 5260) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (#("()" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil) 1 2 (face (rainbow-delimiters-depth-1-face) fontified nil)) . 5261) (undo-tree-id63 . -1) (undo-tree-id64 . 1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (#("use[]" 0 3 (fontified nil) 3 4 (face (rainbow-delimiters-depth-2-face) fontified nil) 4 5 (face (rainbow-delimiters-depth-2-face) fontified nil)) . 5262) (undo-tree-id79 . -3) (undo-tree-id80 . -2) (undo-tree-id81 . -2) (undo-tree-id82 . -2) (undo-tree-id83 . -2) (undo-tree-id84 . -2) (undo-tree-id85 . -2) (undo-tree-id86 . -2) (undo-tree-id87 . -2) (undo-tree-id88 . -4) (undo-tree-id89 . -2) (undo-tree-id90 . -3) (undo-tree-id91 . -3) (undo-tree-id92 . -3) (undo-tree-id93 . -3) (#("/pack" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil) 3 4 (fontified nil) 4 5 (fontified nil)) . 5266) (undo-tree-id94 . -5) (5266 . 5271) (5265 . 5267)) (26383 64231 466747 0) 0 nil])
([nil nil ((5273 . 5274) (5265 . 5273)) ((#("-package" 0 8 (face font-lock-keyword-face fontified nil)) . 5265) (undo-tree-id44 . -8) (undo-tree-id45 . -8) (undo-tree-id46 . -8) (#(" " 0 1 (fontified t)) . 5273)) (26383 64231 466638 0) 0 nil])
nil
